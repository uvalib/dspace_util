#! /bin/bash
#
# Copy to/from the DSpace host.
#
# Usage: dspace_cp [DEPLOYMENT] [SSH_OPTS] SOURCES... TARGET
# Usage: dspace_cp --to [DEPLOYMENT] [SSH_OPTS] LOCAL_SOURCES...
# Usage: dspace_cp --from [DEPLOYMENT] [SSH_OPTS] REMOTE_SOURCES...
#
# If copying from DSpace, remote sources cannot begin with "./" or "../".
# If copying to DSpace, local sources cannot begin with "scp:" or ":".

PROGRAM=`realpath "$0"`
BIN_DIR=`dirname "$PROGRAM"`

source "$BIN_DIR/dspace_values"

readonly REMOTE_HOST="$DSPACE_PRIVATE"      # Target remote host.
readonly REMOTE_USER="$USER"                # Remote host user account.
readonly PRIVATE_KEY="$HOME/.ssh/id_rsa"    # Credentials file for scp.

readonly SEND='to'                          # Copying to $REMOTE_HOST.
readonly RECV='from'                        # Copying from $REMOTE_HOST.

# =============================================================================
# Functions
# =============================================================================

function remote() # path_name
{
    local REMOTE="$REMOTE_USER@$REMOTE_HOST"
    local PATH_NAME="$1"
    case "$PATH_NAME" in
        :*)   echo "$REMOTE$PATH_NAME" ;;
        *)    echo "$REMOTE:$PATH_NAME" ;;
    esac
}

# =============================================================================
# Process command-line ssh flags
# =============================================================================

DIRECTION=''    # $SEND if copying to; $RECV if copying from.
KEY_GIVEN=''    # Whether $PRIVATE_KEY was overridden on the command line.
SSH_OPT=()      # Options passed to scp.

while [[ $# -gt 0 ]] ; do
    case "$1" in
        --from)      DIRECTION="$RECV" ;;
        --to)        DIRECTION="$SEND" ;;
        -i)          SSH_OPT+=("$1" "$2"); KEY_GIVEN=true; shift ;;
        -[cDFJloPS]) SSH_OPT+=("$1" "$2"); shift ;;
        -*)          SSH_OPT+=("$1") ;;
        *)           break ;;
    esac
    shift
done

[[ "$KEY_GIVEN" ]] || SSH_OPT+=(-i "$PRIVATE_KEY")

# =============================================================================
# Process command-line name(s)
# =============================================================================

NAMES=("$@")
LAST_INDEX=`expr $# - 1`
INITIAL_NAMES=("${NAMES[@]:0:$LAST_INDEX}")
FINAL_NAME="${NAMES[$LAST_INDEX]}"

# Infer copy direction based on the final argument if not stated explicitly.
TARGET=''
if [[ "$DIRECTION" ]] ; then
    case "$FINAL_NAME" in
        .|..|./*|../*)  [[ "$DIRECTION" = "$RECV" ]] && TARGET="$FINAL_NAME" ;;
        :*|scp:*)       [[ "$DIRECTION" = "$SEND" ]] && TARGET="$FINAL_NAME" ;;
    esac
else
    case "$FINAL_NAME" in
        .|..|./*|../*)  DIRECTION="$RECV" ;;
        :*|scp:*)       DIRECTION="$SEND" ;;
        *)              abort 'copy direction ambiguous' ;;
    esac
    TARGET="$FINAL_NAME"
fi

# Adjust source(s) based on whether the target is local or remote.
SOURCE=()
if [[ "$DIRECTION" = "$SEND" ]] ; then

    case "$TARGET" in
        scp:*)  ;; # Full remote target URI assumed
        :)      TARGET=`remote "/home/$REMOTE_USER"` ;;
        :*)     TARGET=`remote "$TARGET"` ;;
        *)      TARGET='' ;;
    esac
    if [[ "$TARGET" ]] ; then
        NAMES=("${INITIAL_NAMES[@]}")
    else
        TARGET=`remote "/home/$REMOTE_USER"`
    fi

    # Make sure sources do not appear to be remote items.
    for FILE in "${NAMES[@]}" ; do
        case "$FILE" in
            scp:*)  abort "local source '$FILE' begins with 'scp:'" ;;
            :*)     abort "local source '$FILE' begins with ':'" ;;
        esac
        SOURCE+=("$FILE")
    done

elif [[ "$DIRECTION" = "$RECV" ]] ; then

    case "$TARGET" in
        :*|scp:*|'') TARGET='.' ;;
        *)           NAMES=("${INITIAL_NAMES[@]}") ;;
    esac

    # Make sure sources do not appear to be local items.
    for FILE in "${NAMES[@]}" ; do
        case "$FILE" in
            ../*) abort "remote source '$FILE' begins with '../'" ;;
            ./*)  abort "remote source '$FILE' begins with './'" ;;
        esac
        SOURCE+=(`remote "$FILE"`)
    done

else
    abort "invalid direction '$DIRECTION'"
fi

# =============================================================================
# Run remote copy
# =============================================================================

exec scp "${SSH_OPT[@]}" "${SOURCE[@]}" "$TARGET"
